import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt

# Data Loading and Overview
data = pd.read_csv('data.csv')
print(data.info())
print(data.describe())

# Missing Value Handling
data.fillna(method='ffill', inplace=True)
print(data.isnull().sum())

# Encoding Categorical Variables
label_encoder = LabelEncoder()
for column in ['gender', 'Dependents', 'PhoneService']:
    data[column] = label_encoder.fit_transform(data[column])

# Data Splitting
train_data, test_data = train_test_split(data, test_size=0.2, random_state=42)

# Feature Scaling
scaler = StandardScaler()
train_data_scaled = scaler.fit_transform(train_data)
test_data_scaled = scaler.transform(test_data)

# Distribution Plots
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.hist(train_data['MonthlyCharges'], bins=30, color='blue', alpha=0.7)
plt.title('MonthlyCharges Before Scaling')

plt.subplot(1, 2, 2)
plt.hist(train_data_scaled[:, -1], bins=30, color='green', alpha=0.7)
plt.title('MonthlyCharges After Scaling')
plt.show()

# Clustering with KMeans
sse = []
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(train_data_scaled)
    sse.append(kmeans.inertia_)

# Elbow Method Plot
plt.plot(range(1, 11), sse)
plt.xlabel('Number of Clusters')
plt.ylabel('SSE')
plt.title('Elbow Method For Optimal k')
plt.show()

# KMeans Clustering
kmeans = KMeans(n_clusters=4, random_state=42)
kmeans.fit(train_data_scaled)
train_data['Cluster'] = kmeans.labels_

# Model Saving
import joblib
joblib.dump(kmeans, 'kmeans_model.pkl')

# PCA and Visualization
pca = PCA(n_components=2)
train_data_pca = pca.fit_transform(train_data_scaled)
plt.scatter(train_data_pca[:, 0], train_data_pca[:, 1], c=train_data['Cluster'], cmap='viridis')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.title('PCA-Based Cluster Visualization')
plt.show()
